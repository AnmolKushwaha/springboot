---
- name: Check and Destroy Existing Kubernetes Cluster
  hosts: localhost
  become: true
  vars:
    kube_version: "1.21.0-00"
    arch: "arm64"
  tasks:
    - name: Check if existing Kubernetes cluster is present
      command: kubeadm version
      ignore_errors: true
      register: kubeadm_version

    - name: Set variable to indicate existing cluster status
      set_fact:
        existing_cluster: "{{ kubeadm_version.rc == 0 | bool }}"

    - name: Prompt user based on existing cluster status
      pause:
        prompt: "Do you want to destroy the existing Kubernetes cluster? (yes/no)"
      register: user_input
      when: existing_cluster

    - name: Fail if user selected 'no'
      fail:
        msg: "User chose not to destroy the existing Kubernetes cluster. Exiting."
      when: "'no' in user_input.user_input.lower()"

    - name: Stop conflicting services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - kubelet
        - docker
      ignore_errors: true
      when: "'yes' in user_input.user_input.lower()"

    - name: Remove existing Kubernetes files and directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes/manifests/kube-apiserver.yaml
        - /etc/kubernetes/manifests/kube-controller-manager.yaml
        - /etc/kubernetes/manifests/kube-scheduler.yaml
        - /etc/kubernetes/manifests/etcd.yaml
        - ~/.kube/config
        - /var/lib/etcd
      ignore_errors: true
      when: "'yes' in user_input.user_input.lower()"

  handlers:
    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

- name: Install Kubernetes Cluster
  hosts: localhost
  become: true
  vars:
    kube_version: "1.21.0-00"
    arch: "arm64"
    required_ports:
     - "6443"
     - "10250"
     - "10259"
     - "10257"
     - "8080"
  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Allow incoming traffic using iptables
      iptables:
        chain: INPUT
        in_interface: "{{ ansible_default_ipv4.interface }}"
        protocol: tcp
        state: present
        destination_port: "{{ item }}"
        jump: ACCEPT
      with_items: "{{ required_ports }}"
      become: yes

    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add Kubernetes apt key
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        state: present

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: "deb [arch={{ arch }}] https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: Install Kubernetes components
      apt:
        name: "{{ item }}"
        state: present
        force: yes
      loop:
        - kubelet={{ kube_version }}
        - kubeadm={{ kube_version }}
        - kubectl={{ kube_version }}

    - name: Initialize Kubernetes master
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      ignore_errors: true

    - name: Ensure .kube directory exists.
      file:
        path: ~/.kube
        state: directory
        mode: 0755

    - name: Symlink the kubectl admin.conf to ~/.kube/conf.
      file:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        state: link
        mode: 0644

    - name: Install Flannel network plugin
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

    - name: Allow scheduling user pods on control plane node
      command: "kubectl taint nodes --all node-role.kubernetes.io/master-"

    - name: Generate join command for worker nodes
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to a file for worker nodes
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: "/tmp/kube_join_command.sh"
